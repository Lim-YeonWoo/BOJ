// BOJ 1960 행렬만들기

/* 문제 분류: 그리디 */

/* 문제 설명:
* nxn 0과 1로 이루어져있는 행렬.
* 행렬에 들어있는 1의 개수만 주어졌을 때,
* (ex 1행에는 1이 두 개, 2행에는 3개, 3행에 1개, 4행에 1개, 
   그리고 1열에 2개, 2열에 2개, 3열에 2개, 4열에 1개)
* 행렬을 구하는 프로그램
*/

/* 문제 풀이:
* 그리디 :  1. row 단위로 크게 돌면서, 2. 현재 채워넣어야할 1의 개수가 가장 많은 곳을 채워넣는 것
*/

/* 어려웠던 점 & 다시 한번 살펴볼 부분:
*/

#include <iostream>
#include <queue>
using namespace std;

int n; //nxn행렬
int rows[500]; //rows[i] = i행에 들어있는 1의 개수
int columns[500]; //columns[i] = i열에 들어있는 1의 개수
int matrix[500][500]; //구해야하는 matrix

bool isMatrixValid() {
	int i, j;
	for (j = 0; j < n; j++) {
		int columnSum = 0;
		for (i = 0; i < n; i++) columnSum += matrix[i][j];

		if (columnSum != columns[j]) return false;
	}
	return true;
}

int main()
{
	ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);

	//입력
	cin >> n;

	for (int i = 0; i < n; i++) cin >> rows[i];
	for (int i = 0; i < n; i++) cin >> columns[i];

	int i, j;

	// 우선순위큐 초기화
	priority_queue<pair<int, int>> columnInfo; // 열에 대한 정보 (count, index)
	for (i = 0; i < n; i++) 
		columnInfo.push({ columns[i], i });

	// row 단위로 greedy
	for (i = 0; i < n; i++) {
		//i행에 대해,

		queue<pair<int, int>> poppedQueue; // 선택된 columnInfo의 원소들을 저장

		// 우선순위큐를 활용하여, 선택되어야할 column이 많은 것부터 선택
		for (j = 0; j < rows[i]; j++) {
			//열에서 1의 개수 가장 많은걸 popped에 저장하고 columnInfo에서 빼기
			pair<int, int> popped = columnInfo.top(); 
			columnInfo.pop();

			// [i] [popped.seond]에 1을 넣기 (greedy)
			matrix[i][popped.second] = 1;
			// (count-1, index)를 다시 넣기.
			poppedQueue.push({ popped.first - 1, popped.second });
		}

		// columnInfo <- poppedQueue
		while (!poppedQueue.empty()) {
			columnInfo.push(poppedQueue.front());
			poppedQueue.pop();
		}
	}

	// 행렬 체크
	if (!isMatrixValid()) {
		cout << "-1\n";
	}
	else {
		// 출력
		cout << "1\n";
		for (i = 0; i < n; i++) {
			for (j = 0; j < n; j++) cout << matrix[i][j];
			cout << "\n";
		}
	}

	return 0;
}
