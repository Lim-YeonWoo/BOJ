// BOJ 3037 혼란

/* 문제 분류: 다이나믹 프로그래밍, 누적합 */

/* 문제 설명:
*	1~N까지 번호가 메겨져있는 총 N권의 책을 나눠준다.
*	총 M명의 학생이 (a,b)쌍을 제시하고, a<= 책번호 <=b 인 책 중에 한권을 나눠준다.
*	해당하는 책이 없으면 그 학생한테는 주지 않는다.
*	책을 줄 수 있는 최대 학생 수를 구해라.
*/

/* 문제 풀이:
* N번째 상황에서 N+1 번째 상황까지 넘어갈때를 생각해 점화식을 구해보자.
* N일때의 혼란도를 혼란도(N)이라고 정의하면,
*		혼란도(N) = 혼란도(N-1) + (0~N-1) 
* 즉, 점화식을 생각해보면, 
*		dp[N][C] = 시그마(k=0~N-1) { dp[N-1][C-k] }
* 이를 그대로 코드로 짜면 시간초과 발생. 
* 따라서 dp[N][C]점화식과 dp[N][C-1]점화식을 연립해 점화식을 변형해보면,
*		dp[N][C] = dp[N][C-1] + dp[N-1][C] - dp[N-1][C-N]
* 이제 누적합을 이용해 풀면 된다.
*/

/* 어려웠던 점 & 다시 한번 살펴볼 부분:
*	점화식을 도출하고, 시간초과나지 않게 변형하는 부분이 어려워 구글링을 많이 한 점이 아쉬웠다.
* 변형된 점화식을 코드로 구현하는 것 또한 어려웠다.
* 여러므로 복습이 필요한 문항.
*/

#include <iostream>
#include <algorithm>
#include <cstring> //memset 이용위함

using namespace std;

const int MOD = 1e9 + 7;
int N, C;
int d[1001][10001];

int dp(int N, int C) {
	//시간초과나서 아래의 if문 하나 더 추가함
	if (N * (N - 1) / 2 < C)
		return 0;

	if (!C) 
		return 1;

	if (N == 1)
		return !C ? 1 : 0;

	int& ret = d[N][C]; //int로 선언시 시간초과 발생

	if (ret != -1)
		return ret;

	ret = 0;
	ret += dp(N, C - 1) + dp(N - 1, C);
	ret %= MOD;

	if (C >= N)
		ret -= dp(N - 1, C- N);

	ret = (ret + MOD) % MOD;
	return ret % MOD;
}

int main(void) {
	ios::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);

	cin >> N >> C;
	memset(d, -1, sizeof(d)); //-1이나 0은 memset함수로 초기화 가능.
	cout << dp(N, C) << '\n';
	
	return 0;
}
