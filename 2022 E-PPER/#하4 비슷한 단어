//E-PPER대비 #하4 비슷한 단어

/* 문제 분류: 문자열, 파싱*/

/* 문제 설명: 
.
*/

/* 문제 풀이:
- 배열에 각 알파벳에 대한 인덱스를 지정해 해당 알파벳이 등장할 때마다 값을 하나씩 증가시킴. 예를 들어서, A등장시 a[0]을 1증가.
- 두 단어간의 알파벳 다른 것 개수를 세서 diff에 저장한 후, 맨 마지막에 주어진 조건을 diff를 포함해 구현.
*/

/* 어려웠던 점 & 다시 한번 살펴볼 부분:
알파벳을 배열로 두고 개수를 세는 방법을 생각하지 못했었다.
*/

#include <iostream>
#include <vector>
#include <cstring>

using namespace std;
//본 시험에서는 solution 코드와 별도로 필요한 함수만 작성합니다.

void count (int a[26], string word) { //A부터 Z까지 알파벳을 배열로 생각하고, 해당 알파벳이 등장시 배열값을 1 증가시킨다.
	for (int i=0; i<word.length(); i++) {
		a[word[i]-'A']++;
	}
}

int solution(int n, vector<string>words){    
	int diff; //두 단어간의 알파벳 다른 것 개수
	int freq_first[26]={0}; //첫번째 단어에서 알파벳 빈도를 저장할 배열
	int freq_others[26]={0}; //다른 단어에서 알파벳 빈도를 저장할 배열
    int answer=0;
	
	count(freq_first, words[0]); //첫번째 단어의 알파벳 빈도 계산

	for(int i=1; i<n; i++) {
		diff=0;
		memset(freq_others, 0x0, 26*sizeof(int)); 
		count(freq_others, words[i]); //각 단어의 알파벳 빈도 계산
		
		for(int k=0; k<26; k++) //알파벳 개수 차이를 계산
			diff += abs(freq_others[k] - freq_first[k]);
		
		//비슷한 단어의 조건에 따라 비슷한단어인지 아닌지 판단.
		if(diff==0 || diff ==1 || (diff==2 && words[i].length() == words[0].length())) answer++;
	}
	
    return answer;
}

//test 메인
int main(void) {
    int n,i;
   
    int answer=0;
    
    cin >> n;
    vector<string> words(n);
    for (i = 0; i < n; i++)
       cin >> words[i];
	
    answer = solution(n,words);    
    cout << answer;
}
