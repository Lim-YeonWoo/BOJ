//E-PPER대비 #중2 컬러링북

/* 문제 분류: DFS, BFS, queue */

/* 문제 설명: 
.
*/

/* 문제 풀이:
.
*/

/* 어려웠던 점 & 다시 한번 살펴볼 부분 :
알고리즘을 한번에 떠올리기는 어려웠다.
*/

#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>
using namespace std;
vector<int> solution(int m, int n, vector<vector<int>> picture) {
        int num = 0;
				int max_size =0;
        int dx[] = {0, 0, -1, 1};
        int dy[] = {1, -1, 0, 0};
				int color, cnt, x, y;
        
        queue < pair<int, int> > q; 
        
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                if(picture[i][j] == 0) continue;
							
                num++; //영역의 개수 +1
                cnt = 0; //해당 영역의 넓이를 초기화
                q.push(make_pair(i, j));
                color = picture[i][j]; //해당 영역의 색을 지정
                picture[i][j] = 0; //방문했음을 체크
							
                while(!q.empty()){
                    cnt++; //해당 영역의 넓이 +1
                    x = q.front().first;
                    y = q.front().second;
                    q.pop();
                    for(int k = 0; k<4; k++){
											// 새로 방문할 좌표 범위가 올바른지 확인, 그림의 가장자리에 있는 칸은 상하좌우 모두를 방문할 수 없음.
                        if(x+dx[k] >= 0 && x+dx[k] < m && y+dy[k] >= 0 && y+dy[k] <n && picture[x+dx[k]][y+dy[k]] == color){
                            q.push(make_pair(x+dx[k], y+dy[k]));
                            picture[x+dx[k]][y+dy[k]] = 0; //방문체크
                        }
                    }
                }
                max_size = max(max_size, cnt);
            }
        }
	
				vector<int> answer(2); 
        answer[0] = num;
        answer[1] = max_size;
        return answer;
}

int main(){
    int m, n;
    cin >> m >> n;
    vector<vector<int>> picture(m, vector<int>(n));
    for (int i=0; i<m; i++)
        for (int j=0; j<n; j++) cin >> picture[i][j];
    auto answer = solution(m, n, picture);
    cout << answer[0] << ' ' << answer[1];
    return 0;
}
