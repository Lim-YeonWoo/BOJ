//E-PPER대비 #중2 계단오르기

/* 문제 분류: 다이나믹 프로그래밍*/

/* 문제 설명: 
.
*/

/* 문제 풀이:
n<3일때는 직접 초기화를 해주고,
n>=3일때는 점화식을 이용해, dp방법으로 푼다.

점화식을 찾을때는, 
n의 상황에 도착할 수 있는, 이전 상황을 생각하는 방식으로 찾는다.
*/

/* 어려웠던 점 & 다시 한번 살펴볼 부분:
점화식을 바로 찾지는 못했다.
*/

#include <iostream>
#include <vector>
using namespace std;

//본 시험에서는 solution 코드와 별도로 필요한 함수만 작성합니다.
int solution(int n, vector<int>& score) {
	int answer = 0;
	vector<int> dp(n+1, 0); //각 계단까지의 최대점수 저장할 vec선언
	
	//n<3일때 초기화
	dp[1]=score[1];
	dp[2]=score[1]+score[2];
	
	//점화식이용해서 dp배열 채우기
	for(int i=3; i<=n; i++) {
		dp[i] = max(dp[i-3]+score[i-1], dp[i-2]) + score[i];
	}
	
	answer = dp[n];
	
	return answer; // 최대점수가 저장되어 있는 마지막 계단의 점수값을 리턴한다
}
int main() {
	int n; // 계단의 개수 n
	cin >> n;
	int answer;
	vector<int> score(n + 1, 0); // 계단의 점수를 저장할 변수 선언, 동시에 초기화
			   // -> 1번째 index부터 저장하기 위해, 계단의 개수 + 1 만큼 크기 할당
	for (int i = 1; i <= n; i++)
		cin >> score[i];
	
	answer = solution(n, score);
	cout << answer;
}
