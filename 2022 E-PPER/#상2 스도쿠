//E-PPER대비 #상2 스도쿠

/* 문제 분류: 백트래킹*/

/* 문제 설명: 
스도쿠를 풀어라.
*/

/* 문제 풀이:
.
*/

/* 어려웠던 점 & 다시 한번 살펴볼 부분:
복습필요.
*/

#include <iostream>
#include <vector>
using namespace std;

bool rows[9][10] = {0, }; //rows[i][num] = i행에 num이 존재하는지 저장하는 배열
bool cols[9][10] = {0, };
bool areas[9][10] = {0, }; //areas[a][num] = a번 3x3 영역에 num이 존재하는지 저장하는 배열

vector<pair<int, int>> blank; // 비어있는 칸의 좌표

int find_area(int x, int y){ //좌표가 주어지면, 영역번호를 구해주는 함수
    return 3*(x/3)+(y/3);
}

bool backtracking(int k, int l, vector<vector<int>> *answer){
    if (k == l) return true; //마지막 빈칸까지 채웠으면 완성됨(true)를 리턴
    auto [x, y] = blank[k]; 
    int a = find_area(x, y);
	
    for (int num=1; num<10; num++) {
			//가로줄 세로줄 영역 모두 체크해 가능한 경우 진행.
        if (!rows[x][num] && !cols[y][num] && !areas[a][num]) { //(x,y)에 num을 지벙넣는다.
            rows[x][num] = 1;
            cols[y][num] = 1;
            areas[a][num] = 1;

            (*answer)[x][y] = num; //현재까지의 상태를 answer에 저장
					
            if (backtracking(k+1, l, answer)) return true; //마지막 빈칸까지 채웠다면 여기서 true리턴해 종료
            else {
							//현재 상태에서 해당칸에 num으로 넣다가 막힌거니까, 체크배열을 원래대로 돌리고 다음 경우의 수 탐색.
                rows[x][num] = 0;
                cols[y][num] = 0;
                areas[a][num] = 0;
            }
        }
    }
    return false;
}

vector<vector<int>> solution(vector<vector<int>> sudoku){
    vector<vector<int>> answer(9, vector<int>(9, 0));  // 정답 = 현재의 상태를 저장하는 배열
		for (int i=0; i<9; i++) {
        for (int j=0; j<9; j++) {
            if (sudoku[i][j] == 0) blank.push_back({i, j}); //빈칸의 좌표를 벡터에 추가
            else {
								//각 행, 열, 영역에 이미 부여된 숫자임을 체크배열에 표기. (빈칸아니고 주어진 수임을 표시)
                rows[i][sudoku[i][j]] = 1;
                cols[j][sudoku[i][j]] = 1;
                areas[find_area(i, j)][sudoku[i][j]] = 1;
								//정답배열에 숫자복사
                answer[i][j] = sudoku[i][j];
            }
        }
    }
    int l = blank.size();
    backtracking(0, l, &answer);
    return answer;
}
int main(){
    vector<vector<int>> sudoku(9, vector<int>(9));
    for (int i=0; i<9; i++) {
        for (int j=0; j<9; j++) cin >> sudoku[i][j];
    }
    auto output = solution(sudoku);
    for (int i=0; i<9; i++) {
        for (int j=0; j<9; j++) cout << output[i][j] << ' ';
        cout << '\n';
    }
    return 0;
}

